# Script that parses the Doxygen command help page
# https://www.doxygen.nl/manual/commands.html,
# extracts the documentation for each command and
# generates a C# file that exposes the information.

from bs4 import BeautifulSoup
import os
from datetime import datetime


class ParsedCommand:
    def __init__(self, header: str, help_text: str):
        assert(len(header) > 0)
        self.raw_header = escape_characters(header)
        self.help_text = escape_characters(help_text)

        if header[0] != "\\":
            raise Exception(f"Header does not start with '\\': {header}")
        
        space_pos = header.find(" ")
        if space_pos == -1:
            space_pos = len(header)
        square_bracket_pos = header.find("[")
        if square_bracket_pos == -1:
            square_bracket_pos = len(header)

        if square_bracket_pos < space_pos:
            cmd_end_pos = square_bracket_pos
            param_start_pos = square_bracket_pos
        else:
            cmd_end_pos = space_pos
            param_start_pos = min(space_pos + 1, len(header))

        self.command = header[1:cmd_end_pos]
        self.parameters = header[param_start_pos:]

        self.command = escape_characters(self.command)
        self.parameters = escape_characters(self.parameters)


def escape_characters(raw_string: str):
    return raw_string.replace("\\", "\\\\").replace('"', '\\"').replace("\r", "").replace("\n", "\\n")


def parse_doxygen_help_html(file) -> list[ParsedCommand]:
    soup = BeautifulSoup(file, 'html.parser')
    
    all_parsed_commands: list[ParsedCommand] = []

    # The actual descriptions start at the first <h1> tag after the first <center> tag.
    tag = soup.find("center")
    tag = tag.find_next_sibling("h1")

    while tag != None:
        header_tag = tag
        tag = tag.next_sibling
        description_tags = []

        # The description of one Doxygen command continues until the next <h1> tag.
        while tag != None and tag.name != "h1":
            description_tags.append(tag)
            tag = tag.next_sibling
        
        parsed = parse_html_tags_of_single_command(header_tag, description_tags)
        all_parsed_commands.append(parsed)

    return all_parsed_commands
        

def parse_html_tags_of_single_command(header_tag, description_tags):
    description_text = ""
    for desc_tag in description_tags:
        if desc_tag.name == "dl":
            joined_attributes_for_dl = ' '.join(desc_tag['class'])
        else:
            joined_attributes_for_dl = ""

        if joined_attributes_for_dl == "section see":
            continue

        s = desc_tag.get_text().strip()
        if s != "":
            is_code = desc_tag.name == "pre" or (desc_tag.name == "div" and ' '.join(desc_tag['class']) == "fragment") or joined_attributes_for_dl == "section user"
            if not is_code:
                s = s.replace('\r', '').replace('\n', '')

            # Ignore the end of the html file.
            if s.startswith("Go to the next section or return to the  index"):
                continue

            if s.startswith("Warning"):
                s = "Warning: " + s[len("Warning"):]
            if s.startswith("Note"):
                s = "Note: " + s[len("Note"):]

            s = s.strip()
            if s != "":
                description_text += s + "\n\n"

    description_text = description_text.strip()
    header_text = header_tag.get_text().strip()
    return ParsedCommand(header_text, description_text)


def generate_text_for_csharp_file(commands: list[ParsedCommand]) -> str:
    python_file = os.path.basename(__file__)
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    max_command_len, max_parameters_len = get_max_component_lengths(commands)

    s = f"// This file was automatically generated by the Python script\n"
    s += f"// {python_file} on {current_time}.\n\n"

    s += "namespace VSDoxyHighlighter\n"
    s += "{\n"
    s += "  class DoxygenCommandsGeneratedFromHelpPage\n"
    s += "  {\n"
    s += "    public static readonly DoxygenHelpPageCommand[] cCommands = {\n"

    for cmd in commands:
        command_padding = " " * (max_command_len - len(cmd.command))
        parameters_padding = " " * (max_parameters_len - len(cmd.parameters))
        s += f'      new DoxygenHelpPageCommand("{cmd.command}",{command_padding} "{cmd.parameters}",{parameters_padding} "{cmd.help_text}"),\n'

    s += "    };\n"
    s += "  }\n"
    s += "}\n"

    return s


def get_max_component_lengths(commands: list[ParsedCommand]):
    command_len = 0
    parameters_len = 0
    for cmd in commands:
        command_len = max(command_len, len(cmd.command))
        parameters_len = max(parameters_len, len(cmd.parameters))
    return (command_len, parameters_len)


def extract_and_convert_doxygen_commands_from_html(html_filename: str, output_csharp_filename: str):
    with open(html_filename, 'r', encoding='utf-8') as input_file:
        parsed_commands = parse_doxygen_help_html(input_file)
    
    csharp_text = generate_text_for_csharp_file(parsed_commands)
    with open(output_csharp_filename, 'w', encoding='utf-8') as output_file:
        output_file.write(csharp_text)


if __name__ == "__main__":
    extract_and_convert_doxygen_commands_from_html(
        "VSDoxyHighlighter/DoxygenHelpPageParser/testInput.htm", 
        "VSDoxyHighlighter/DoxygenHelpPageParser/DoxygenCommandsGeneratedFromHelpPage.cs")
